Things that need to be done...

... as always, mostly outdated.

0. Fix that ugly crash that happens sometimes when Ctrl+C-ing with jack output active:

Program terminated with signal 11, Segmentation fault.
[New process 6293]
[New process 6291]
[New process 6292]
[New process 6284]
#0  0x00002aced607695b in memcpy () from /lib/libc.so.6
(gdb) bt
#0  0x00002aced607695b in memcpy () from /lib/libc.so.6
#1  0x00002aced5b4f092 in jack_ringbuffer_read () from /usr/lib/libjack.so.0
#2  0x00000000004151dd in process_callback ()
#3  0x00002aced5b4bf40 in Jack::JackClient::Execute () from /usr/lib/libjack.so.0
#4  0x00002aced5b5f8da in Jack::JackPosixThread::ThreadHandler () from /usr/lib/libjack.so.0
#5  0x00002aced6354fa7 in start_thread () from /lib/libpthread.so.0
#6  0x00002aced60c802d in clone () from /lib/libc.so.6


1. mpg123 could pick up new sample rates suggested by the output modules (like a jack server fixed to 96kHz) and adapt to that.

Though the practical rates for MPEG audio are up to 48kHz ... but one could easily upsample.
Currently, we detect standard rates and resample when needed... but not new ones.

4. Prevent ID3v2 tags from being parsed multiple times after seek.

Currently, the raw ID3v2 tag is always overwritten, but each parsing pass
over an ID3v2 data structure adds to the data stored in the tag. It
collects everything in the arrays (test: id3v2.texts increases). Is
this a bug or a feature? In the case of the same tag being parsed over
and over again, it's clearly a bug. But is it a feature to collect
and aggregate multiple ID3v2 tags in a stream?

I think not. We communicate new ID3v2 data to the caller. The caller
can archive things if desired. The behaviour should be to overwrite
what's in the current ID3v2 tag, with the possible optimization of
skipping parsing if it's the same tag again.

But then … there is http://id3.org/id3v2.4.0-structure defining flag
b in th extended header. There is the concept of update tags.
So … if that flag is not present, full replace should happen, if it is,
new data overrides old data, but does not delete non-overwritten data.
Do I want to implement ID3 tag merging?

I need to carry a list of ID3v2 frame addresses that already have been parsed into the data structures.
Currently, this is a possible memory leak when the seek index is disabled (tag data at file beginning) or id3 data is just somewhere in the stream.
That being said, in the "normal" case, there is no leak.

5. What's about SINGLE_MIX?
Check what is _really_ happening there, make some test file...
